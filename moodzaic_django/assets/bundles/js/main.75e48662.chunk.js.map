{"version":3,"sources":["components/LogIn.js","components/Menu.js","components/Footer.js","components/Reminders.js","components/ProfPage.js","components/MoodInput.js","integration_funcs.js","components/Community.js","components/MyCommunities.js","components/AllCommunities.js","components/CommunityPage.js","components/SignUp.js","components/AccountSetup.js","components/App.js","serviceWorker.js","index.js","logo.png"],"names":["LoginForm","state","LoggedIn","logIn","props","callback","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","Header","as","color","Image","src","logo","Form","size","Segment","stacked","Input","fluid","icon","iconPosition","placeholder","type","Button","onClick","this","Message","to","React","Component","MyMenu","visible","toggleVisibility","setState","prevState","Menu","fixed","inverted","Container","Item","header","Transition","animation","duration","marginRight","Link","Footer","vertical","margin","padding","divided","stackable","width","content","List","link","target","href","centered","marginTop","Reminders","myReminders","renderNumber","fetch","then","response","json","data","slice","map","r","i","key","length","showMore","ProfilePage","Name","Username","Age","Gender","ProgressScore","Notifications","columns","text","marginLeft","getDailyQuestions","getMoods","MoodPage","QuestionList","MoodList","Question","index","Field","Dropdown","search","selection","options","Mood","value","Community","handleChange","e","message","handleSubmit","community","myCommunity","posts","username","today","Date","printPosts","getMonth","getDate","getFullYear","getHours","getMinutes","getSeconds","post","Comment","Avatar","Content","Author","poster","name","Metadata","time","Text","Actions","Action","comment_list","empty","Group","dividing","onSubmit","TextArea","onChange","labelPosition","primary","CommunitiesPage","openCommunity","c","communityCallback","communities","myCommunities","com","AllCommunities","allCommunities","addCommunity","CommunityPage","AddMode","MyCommunityList","CommunityList","toggleAddMode","OpenCommunity","acommunity","myPage","myButton","addMode","myCommunityList","communityList","toggleCommunity","console","log","SignUpForm","getInitialQuestions","GenderOptions","SetupPage","step","AnswerList","totalSteps","nextStep","prevStep","input","event","class","Rating","defaultRating","maxRating","App","MyObservationList","LastObservationTime","toggleLogIn","path","SignUp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"js/main.75e48662.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Form, Grid, Header, Image, Message, Segment } from 'semantic-ui-react'\nimport logo from '../logo.png'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nclass LoginForm extends React.Component {\n  state = {\n    LoggedIn: false\n  }\n\n\n  logIn = () => {\n    //here we need to somehow check that the person is legit lol\n    this.props.callback();\n  }\n\n\n  render() {\n    return(\n      <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as='h2' color='teal' textAlign='center'>\n            <Image src={logo} /> Log-in to your account\n          </Header>\n          <Form size='large'>\n            <Segment stacked>\n              <Form.Input fluid icon='user' iconPosition='left' placeholder='Username' />\n              <Form.Input\n                fluid\n                icon='lock'\n                iconPosition='left'\n                placeholder='Password'\n                type='password'\n              />\n              <Button color='teal' fluid size='large' onClick={this.logIn}>\n                Login\n              </Button>\n            </Segment>\n          </Form>\n          <Router>\n            <Message>\n              New to us? <Link to='/signup'>Sign Up</Link>\n            </Message>\n          </Router>\n        </Grid.Column>\n      </Grid>\n    )\n  }\n}\n\nexport default LoginForm\n","import React from 'react'\nimport logo from '../logo.png';\nimport {\n  Container,\n  Image,\n  Menu,\n  Transition,\n  Button\n} from 'semantic-ui-react'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nclass MyMenu extends React.Component {\n  state = {\n    visible: true\n  }\n\n  toggleVisibility = () =>\n      this.setState((prevState) => ({ visible: !prevState.visible }))\n\n  render() {\n    return(\n      <div>\n        <Menu fixed='top' inverted>\n          <Container>\n            <Menu.Item as={Button} onClick={this.toggleVisibility} header>\n              <Transition\n                animation='tada'\n                duration= {700}\n                visible={this.state.visible}\n              >\n                <Image size='mini' src={logo} style={{ marginRight: '1.5em' }} />\n              </Transition>\n            </Menu.Item>\n            <Menu.Item as={Link} to=\"/MyMood\">Record Mood</Menu.Item>\n            <Menu.Item as={Link} to=\"/Profile\">My Moodzaic</Menu.Item>\n            <Menu.Item as={Link} to=\"/Communities\">My Communities</Menu.Item>\n          </Container>\n        </Menu>\n      </div>\n    )\n  }\n}\n\nexport default MyMenu;\n\n// <Dropdown item simple text='Dropdown'>\n//   <Dropdown.Menu>\n//     <Dropdown.Item>List Item</Dropdown.Item>\n//     <Dropdown.Item>List Item</Dropdown.Item>\n//     <Dropdown.Divider />\n//     <Dropdown.Header>Header Item</Dropdown.Header>\n//     <Dropdown.Item>\n//       <i className='dropdown icon' />\n//       <span className='text'>Submenu</span>\n//       <Dropdown.Menu>\n//         <Dropdown.Item>List Item</Dropdown.Item>\n//         <Dropdown.Item>List Item</Dropdown.Item>\n//       </Dropdown.Menu>\n//     </Dropdown.Item>\n//     <Dropdown.Item>List Item</Dropdown.Item>\n//   </Dropdown.Menu>\n// </Dropdown>\n","import React from 'react'\nimport logo from '../logo.png';\nimport {\n  Container,\n  Grid,\n  Header,\n  Image,\n  List,\n  Segment,\n} from 'semantic-ui-react'\n\nconst Footer = () => (\n  <div>\n    <Segment inverted vertical style={{ margin: '7em 0em 0em', padding: '4em 0em' }}>\n      <Container textAlign='center'>\n        <Grid divided inverted stackable>\n          <Grid.Column width={3}>\n            <Header inverted as='h4' content='Source' />\n            <List link inverted>\n              <List.Item as='a' target=\"_blank\" href=\"https://github.com/reyesj5/moodzaic\">\n                Our Github\n              </List.Item>\n            </List>\n          </Grid.Column>\n          <Grid.Column width={3}>\n            <Header inverted as='h4' content='Group Members' />\n            <List link inverted>\n              <List.Item >Molly Fortnow</List.Item>\n              <List.Item >Daniel Steinberg</List.Item>\n              <List.Item >Jersey Fonseca</List.Item>\n              <List.Item >Emil Sohlberg</List.Item>\n              <List.Item >Marco Anaya</List.Item>\n              <List.Item >Zipporah Klain</List.Item>\n              <List.Item >Hunter</List.Item>\n              <List.Item >Chema ? I'll alphabatize this later</List.Item>\n              <List.Item >note to group: can link your name to whatever you want (linkedin, portfolio, whatever)</List.Item>\n            </List>\n          </Grid.Column>\n          <Grid.Column width={7}>\n            <Header inverted as='h4' content='Moodzaic' />\n            <p>\n              Moodzaic was created as a project for Software Construction at UChicago in Autumn 2019.\n              We have been very tired; please excuse any bugs.\n              Thank you.\n            </p>\n            <Image centered style={{ marginTop: '3em' }} size='mini' src={ logo } />\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </Segment>\n  </div>\n)\n\nexport default Footer\n","import React from 'react'\nimport {\n  Container,\n  Message,\n  Segment,\n  Button\n} from 'semantic-ui-react'\n\n\nclass Reminders extends React.Component {\n  state = {\n    myReminders: [],\n    renderNumber: 3\n  }\n\n  componentDidMount() {\n    fetch('')\n      .then(response => response.json())\n      .then(data => this.setState({ myReminders : data }));\n  }\n\n  showMore() {\n    this.setState({\n      renderNumber: (this.state.renderNumber + 3)\n    })\n  }\n\n  render() {\n    const myReminders = this.state.myReminders;\n    const renderNumber = this.state.renderNumber;\n    // const printing = (this.showMore(myReminders)).map((r, i)\n    return(\n      <div>\n      <Container>\n        <Segment placeholder>\n            <h1>Reminders!</h1>\n            {myReminders.slice(0, renderNumber).map((r, i) => {\n              return(\n                <Message key = {i} color = 'purple'>\n                  <p>{r}</p>\n               </Message>\n             )})}\n             {(renderNumber <= myReminders.length) ?\n               <Button onClick = {this.showMore()}>Show Older Reminders</Button> :\n               <p>That's all the reminders you've gotten! Keep recording observations to get some more :)</p>\n             }\n          </Segment>\n        </Container>\n      </div>\n    )\n  }\n}\n\n\n\n\nexport default Reminders;\n","import React from 'react'\nimport {\n  Container,\n  Divider,\n  Grid,\n  Header,\n  Image,\n  List,\n  Segment,\n} from 'semantic-ui-react'\nimport MyMenu from './Menu.js';\nimport Footer from './Footer.js';\nimport Reminders from './Reminders.js';\n\nconst ProfilePage = ({Name, Username, Age, Gender, ProgressScore, Notifications}) => (\n  <div>\n    <MyMenu />\n    <Grid columns={2}>\n      <Grid.Column width = {10}>\n        <Container text style={{ marginTop: '7em', marginLeft: '10em' }}>\n          <Header as='h1'>{Username}'s Profile</Header>\n            <p>{Notifications}</p>\n            <p>My name? <strong>{Name}</strong></p>\n            <p>My age? <strong>{Age}</strong></p>\n            <p>My Gender? <strong>{Gender}</strong></p>\n            <p>My progress score towards my big goal: <strong>{ProgressScore}</strong></p>\n            <p>\n            Once we've built up some data in the backend, I can display your mood history here!\n            </p>\n          </Container>\n        </Grid.Column>\n        <Grid.Column width = {5}>\n          <Reminders/>\n        </Grid.Column>\n      </Grid>\n    <Footer />\n  </div>\n)\n\nexport default ProfilePage;\n","import React from 'react'\nimport {\n  Container,\n  Header,\n  Form,\n  Button,\n  Dropdown\n} from 'semantic-ui-react'\nimport MyMenu from './Menu.js';\nimport Footer from './Footer.js';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nconst getDailyQuestions = () => {\n  const questions = [\n    \"Hours of sleep\",\n    \"Hours of exercise\",\n    \"Meals/day\",\n    \"Hours of work\"\n  ]\n  return questions;\n}\n\nconst getMoods = () => {\n  const moods = [\n    \"Loathing\",\n    \"Repugnant\",\n    \"Revolted\",\n    \"Revulsion\",\n    \"Detestable\",\n    \"Aversion\",\n    \"Hesitant\",\n    \"Remoresful\",\n    \"Ashamed\",\n    \"Ignored\",\n    \"Victimized\",\n    \"Powerless\",\n    \"Vulnerable\",\n    \"Inferior\",\n    \"Empty\",\n    \"Abandoned\",\n    \"Isolated\",\n    \"Apathetic\",\n    \"Indifferent\",\n    \"Inspired\",\n    \"Open\",\n    \"Playful\",\n    \"Sensitive\",\n    \"Hopeful\",\n    \"Loving\"\n  ]\n  return moods;\n}\n\nclass MoodPage extends React.Component {\n  state = {\n    QuestionList: getDailyQuestions(),\n    MoodList: getMoods()\n  }\n  render() {\n    const {QuestionList} = this.state;\n    const {MoodList} = this.state;\n    return(\n      <div>\n        <MyMenu />\n        <Container text style={{ marginTop: '7em' }}>\n          <Header as='h1'>How are you feeling?</Header>\n          <p>Some ~important~ questions for you about your mood today.</p>\n          {QuestionList.map((Question, index) => {\n            return (<Form>\n              <Form.Field>\n                <label>{Question}</label>\n                <input />\n              </Form.Field>\n            </Form>)})}\n            <Form>\n              <Form.Field>\n                <label>Mood</label>\n                <Dropdown placeholder='Select' fluid search selection\n                  options={MoodList.map((Mood, index) =>\n                    {return({value: Mood, text: Mood})})\n                  } />\n              </Form.Field>\n            </Form>\n            <br />\n          <Link to=\"/Profile\">\n            <Button color='teal' fluid size='large'>\n              Submit\n            </Button>\n          </Link>\n        </Container>\n        <Footer />\n      </div>\n    )\n  }\n}\n\n// {MoodList.map((Mood, index) => {\n// return(<Dropdown placeholder='Select'\n//   fluid selection options={[\n//     {value:{Mood} ,text:\"grumpy\"},\n//     {value:\"big mood\", text:\"big mood\"},\n//     {value:\"nibblish\", text:\"nibblish\"}]} />)\n//   })\n// }\n\nexport default MoodPage;\n","export function addCommunity(c) {\n  //add the community c to the list of all communities in the overall data\n  //unless it's already added lol\n}\n\nexport function isMyCommunity(c) {\n  //check if the community c is in your personal list of communities\n}\n\nexport const getMyCommunityList = (username) => {\n  //get the community list of the username from the data\n  return [];\n}\n\nexport const getAllCommunities = () => {\n  //get the info of all the communities\n  return [];\n}\n\nexport function getUserByUsername(u) {\n  //get all of a user's info by putting in their username\n  const ret = {\n    username: '',\n    name: '',\n    etc: ''\n  }\n  //fill in all the stuff\n  return ret;\n}\n\nexport const getPosts = (com) => {\n  //get a list of all the posts from the community\n  const ret = [];\n  // for each in com.posts {\n  //   ret.append({\n  //     poster: post.poster lol so like this is not in the class diagram\n  //     message: post.post,\n  //     time: post.post_time,\n  //     comment_list: post.comment_list (list of objects: poster (string) and message (string))\n  //   })\n  // }\n  return ret;\n}\n\nexport const sendPost = (post) => {\n  //add a post to the backend\n  //complete with poster, message, time, and comment_list\n  //adds it to the correct list -- the og list of posts or whatever comment post or whatever\n  return;\n}\n\n// export default { addCommunity, isMyCommunity, getMyCommunityList, getAllCommunities, getUserByUsername, getPosts, sendPost }\n","import React from 'react'\nimport logo from '../logo.png';\nimport {\n  Header,\n  Form,\n  Comment\n} from 'semantic-ui-react'\nimport { getPosts, sendPost } from '../integration_funcs.js'\n\n\n\n// class FormExampleClearOnSubmit extends React.Component {\n//   state = {}\n//\n//   handleChange = (e, { name, value }) => this.setState({ [name]: value })\n//\n//   handleSubmit = () => this.setState({ email: '', name: '' })\n//\n//   render() {\n//     const { name, email } = this.state\n//\n//     return (\n//       <Form onSubmit={this.handleSubmit}>\n//         <Form.Group>\n//           <Form.Input\n//             placeholder='Name'\n//             name='name'\n//             value={name}\n//             onChange={this.handleChange}\n//           />\n//           <Form.Input\n//             placeholder='Email'\n//             name='email'\n//             value={email}\n//             onChange={this.handleChange}\n//           />\n//           <Form.Button content='Submit' />\n//         </Form.Group>\n//       </Form>\n//     )\n//   }\n// }\n\nclass Community extends React.Component {\n  state = {}\n\n  handleChange = (e, { message, value }) => this.setState({ [message]: value })\n\n  handleSubmit = () => {\n    // sendPost({poster: u,\n    //           message: m,\n    //           time: t,\n    //           comment_list: []\n    //         });\n    this.setState({ message: '' });\n  }\n\n  render() {\n    const { message } = this.state\n    const community = this.props.myCommunity;\n    const username = this.props.username;\n    const posts = getPosts(community);\n\n    var today = new Date();\n    var date = (today.getMonth()+1)+'-'+today.getDate()+'/'+today.getFullYear();\n    var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    var now = date+' '+time;\n\n    // function printComments(comments) {\n    //   return (\n    //     comments.map((c, i) => {\n    //       return(\n    //         <Comment key = {i}>\n    //           <Comment.Avatar src={logo} />\n    //           <Comment.Content>\n    //             <Comment.Author as='a'>{c.poster}</Comment.Author>\n    //             <Comment.Text>{c.message}</Comment.Text>\n    //           </Comment.Content>\n    //         </Comment>\n    //       )\n    //     })\n    //   )\n    // }\n\n    const printPosts = posts.map((post, i) => {\n      return (\n        <Comment key = {i} >\n          <Comment.Avatar src={logo} />\n          <Comment.Content>\n            <Comment.Author as='a'>{post.poster.name}</Comment.Author>\n            <Comment.Metadata>\n              <div>{post.time}</div>\n            </Comment.Metadata>\n            <Comment.Text>{post.message}</Comment.Text>\n            <Comment.Actions>\n              <Comment.Action>Reply</Comment.Action>\n            </Comment.Actions>\n          </Comment.Content>\n          {post.comment_list.empty ? '' :\n          <Comment.Group>\n            {printPosts(post.comment_list)}\n          </Comment.Group>\n          }\n        </Comment>\n      )\n    })\n\n    return (\n      <div>\n        <Comment.Group>\n          <Header as='h3' dividing>\n            {community}\n          </Header>\n\n          {printPosts}\n\n          <Form onSubmit={this.handleSubmit}>\n            <Form.TextArea\n              placeholder='Say something to the community!'\n              name='message'\n              value={message}\n              onChange={this.handleChange}\n            />\n            <Form.Button\n              content='Post'\n              labelPosition='left'\n              icon='edit' primary\n            />\n          </Form>\n        </Comment.Group>\n      </div>\n    )\n  }\n}\n\n// const CommentExampleComment = () => (\n// <Comment.Group>\n//   <Header as='h3' dividing>\n//     Comments\n//   </Header>\n//\n//   <Comment>\n//     <Comment.Avatar src={logo} />\n//     <Comment.Content>\n//       <Comment.Author as='a'>Matt</Comment.Author>\n//       <Comment.Metadata>\n//         <div>Today at 5:42PM</div>\n//       </Comment.Metadata>\n//       <Comment.Text>How artistic!</Comment.Text>\n//       <Comment.Actions>\n//         <Comment.Action>Reply</Comment.Action>\n//       </Comment.Actions>\n//     </Comment.Content>\n//   </Comment>\n//\n//   <Comment>\n//     <Comment.Avatar src='/images/avatar/small/elliot.jpg' />\n//     <Comment.Content>\n//       <Comment.Author as='a'>Elliot Fu</Comment.Author>\n//       <Comment.Metadata>\n//         <div>Yesterday at 12:30AM</div>\n//       </Comment.Metadata>\n//       <Comment.Text>\n//         <p>This has been very useful for my research. Thanks as well!</p>\n//       </Comment.Text>\n//       <Comment.Actions>\n//         <Comment.Action>Reply</Comment.Action>\n//       </Comment.Actions>\n//     </Comment.Content>\n//     <Comment.Group>\n//       <Comment>\n//         <Comment.Avatar src={logo} />\n//         <Comment.Content>\n//           <Comment.Author as='a'>Jenny Hess</Comment.Author>\n//           <Comment.Metadata>\n//             <div>Just now</div>\n//           </Comment.Metadata>\n//           <Comment.Text>Elliot you are always so right :)</Comment.Text>\n//           <Comment.Actions>\n//             <Comment.Action>Reply</Comment.Action>\n//           </Comment.Actions>\n//         </Comment.Content>\n//       </Comment>\n//     </Comment.Group>\n//   </Comment>\n//\n//   <Comment>\n//     <Comment.Avatar src={logo} />\n//     <Comment.Content>\n//       <Comment.Author as='a'>Joe Henderson</Comment.Author>\n//       <Comment.Metadata>\n//         <div>5 days ago</div>\n//       </Comment.Metadata>\n//       <Comment.Text>Dude, this is awesome. Thanks so much</Comment.Text>\n//       <Comment.Actions>\n//         <Comment.Action>Reply</Comment.Action>\n//       </Comment.Actions>\n//     </Comment.Content>\n//   </Comment>\n//\n//   <Form reply>\n//     <Form.TextArea />\n//     <Button content='Add Reply' labelPosition='left' icon='edit' primary />\n//   </Form>\n// </Comment.Group>\n// )\n\n\n\nexport default Community\n","import React from 'react'\nimport {\n  Container,\n  Button,\n} from 'semantic-ui-react'\n\n\n// const CommunitiesPage = ({myCommunities}) => (\n//   <div>\n//     <MyMenu />\n//     <Container text style={{ marginTop: '7em' }}>\n//     <p> should show all the communities and allow you to select one to look at,\n//     and then pass that info for the specific community page</p>\n//     </Container>\n//     <Footer />\n//   </div>\n// )\n\nclass CommunitiesPage extends React.Component {\n  state = {\n    openCommunity: false\n  }\n\n  // openCommunity(c) {\n  //   return <Community communityName = {c} />\n  // }\n  openCommunity = (c) => {\n         this.props.communityCallback(c);\n    }\n\n  render() {\n    const myCommunities = this.props.myCommunities;\n    const communities = myCommunities.map((com, i) => {\n      return <Button\n                color='teal' fluid size='large'\n                key = {i}\n                onClick = {this.openCommunity(com)}>\n                {com}\n              </ Button>;\n    })\n\n    return (\n      <div>\n        <Container text style={{ marginTop: '7em' }}>\n          <p> should show all the communities and allow you to select one to look at,\n          and then pass that info for the specific community page</p>\n          {communities}\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default CommunitiesPage\n","import React from 'react'\nimport {\n  Container,\n  Button,\n} from 'semantic-ui-react'\nimport { addCommunity, isMyCommunity } from '../integration_funcs.js'\n\nfunction AllCommunities({allCommunities}) {\n  const communities = allCommunities.map((com, i) => {\n    return <Button\n              color='teal' fluid size='large'\n              key = {i}\n              onClick = {addCommunity(com)}>\n              {com}: {isMyCommunity(com) ? 'added!' : 'add?'}\n            </ Button>;\n  })\n\n  return (\n    <div>\n      <Container text style={{ marginTop: '7em' }}>\n        <p> should show all the communities and allow you to select any to join</p>\n        {communities}\n      </Container>\n    </div>\n  )\n}\n\n\nexport default AllCommunities\n","import React from 'react'\nimport {\n  Container,\n  Button,\n} from 'semantic-ui-react'\nimport MyMenu from './Menu.js';\nimport Footer from './Footer.js';\nimport Community from './Community.js'\nimport CommunitiesPage from './MyCommunities.js'\nimport AllCommunities from './AllCommunities.js'\nimport { getMyCommunityList, getAllCommunities } from '../integration_funcs.js'\n\n\n\nclass CommunityPage extends React.Component {\n  state = {\n        Community: '',\n        AddMode: false,\n        MyCommunityList: null,\n        CommunityList: null\n        // should these be props?\n  }\n\n  componentDidMount() {\n    fetch('')\n      .then(response => response.json())\n      .then(data => this.setState({ MyCommunityList : data }));\n  }\n\n\n  toggleAddMode = () => {\n    this.setState(prevState => ({\n      AddMode: !prevState.AddMode\n    }))\n  }\n\n  OpenCommunity = (acommunity) => {\n    this.setState(prevState => ({\n      Community: acommunity\n    }))\n  }\n\n\n\n  render() {\n    const addMode = this.state.AddMode;\n    const community = this.state.Community;\n    const myCommunityList = this.state.MyCommunityList;\n    const communityList = this.state.CommunityList;\n    const username = this.props.username;\n    let myPage, myButton;\n\n    if (community !== '') {\n      myPage = <Community myCommunity = {community} username = {username} />;\n      myButton =\n      <Button color='teal' fluid size='large' onClick = {this.toggleCommunity('')}>\n        See My Communities\n      </Button>;\n    }\n\n    else if (addMode === false) {\n      myPage = <CommunitiesPage communityCallback = {this.OpenCommunity} myCommunities = {myCommunityList}/>;\n      myButton =\n      <Button color='teal' fluid size='large' onClick = {this.toggleAddMode}>\n        See All Communities\n      </Button>;\n    }\n\n    else {\n      myPage = <AllCommunities allCommunities = {communityList}/>;\n      myButton =\n      <Button color='teal' fluid size='large' onClick = {this.toggleAddMode}>\n        See My Communities\n      </Button>;\n    }\n    console.log(this.state);\n\n    return (\n      <div>\n        <MyMenu />\n        <Container text style={{ marginTop: '7em' }}>\n          <p> should call my communities\n          unless:\n          user chooses to see all communities, then calls AllCommunities\n          or a community is selected, then call community and open that community</p>\n          {myPage}\n          {myButton}\n        </Container>\n        <Footer />\n      </div>\n    )\n  }\n}\n\n\n\n\nexport default CommunityPage;\n","import React from 'react'\nimport { Button, Form, Grid, Header, Image, Message, Segment } from 'semantic-ui-react'\nimport logo from '../logo.png'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nconst SignUpForm = () => (\n  <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n    <Grid.Column style={{ maxWidth: 450 }}>\n      <Header as='h2' color='teal' textAlign='center'>\n        <Image src={logo} /> Sign up for an account\n      </Header>\n      <Form size='large'>\n        <Segment stacked>\n          <Form.Input fluid icon='user' iconPosition='left' placeholder='Username' />\n          <Form.Input\n            fluid\n            icon='lock'\n            iconPosition='left'\n            placeholder='Password'\n            type='password'\n          />\n          <Form.Input\n            fluid\n            icon='lock'\n            iconPosition='left'\n            placeholder='Confirm Password'\n            type='password'\n          />\n          <Link to='/Welcome'>\n            <Button color='teal' fluid size='large'>\n              Sign Up\n            </Button>\n          </Link>\n        </Segment>\n      </Form>\n      <Message>\n        Already have an account? <Link to='/'>Log In</Link>\n      </Message>\n    </Grid.Column>\n  </Grid>\n)\n\nexport default SignUpForm\n","import React from 'react'\nimport logo from '../logo.png';\nimport {\n  Container,\n  Header,\n  Form,\n  Dropdown,\n  Image,\n  Grid,\n  Button,\n  Rating\n} from 'semantic-ui-react'\nimport MyMenu from './Menu.js';\nimport Footer from './Footer.js';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nconst getInitialQuestions = () => {\n  //TODO integrate: get setup questions from backend\n  // We might want to attach types to questions based on response needed.\n  // E.g. L5 for 5-option likert, S for string, {option 1, option 2, option 3} for dropdown\n  const questions = [\n    \"I feel depressed\",\n    \"I wake up often during the night\",\n    \"I have no motivation\",\n    \"I find it difficult to think clearly\",\n    \"I feel anxious\",\n    \"I like smoking a cigarette\",\n    \"I feel worried\",\n    \"I am irritable\",\n    \"My morale is low\",\n    \"I have NO patience\",\n    \"I find it hard to concentrate\",\n    \"I am eating more than usual\",\n    \"I get angry easily\",\n    \"I feel nervous\",\n    \"I feel restless\",\n    \"I have put on weight recently\",\n    \"I find it hard to focus on the task at hand\",\n    \"I have difficulty sleeping\",\n    \"I feel down\",\n    \"I have trouble falling asleep at night\",\n    \"I have insomnia (sleep problems, awakening at night)\",\n    \"Restless (impatient)\",\n    \"Food is not particularly appealing to me\",\n    \"I am getting restful sleep\",\n    \"I have been tense or anxious\",\n    \"My level of concentration is excellent\",\n    \"I have felt impatient\",\n    \"I have felt upbeat and optimistic\",\n    \"I have found myself worrying about my problems\",\n    \"I have felt calm lately\",\n    \"I have felt sad or depressed\",\n    \"I have been irritable, easily angered\",\n    \"I want to nibble on snacks or sweets\",\n    \"I have been bothered by negative moods such as anger, frustration, and irritability\",\n    \"I have been eating a lot\",\n    \"I am satisfied with my sleep\",\n    \"I have felt frustrated\",\n    \"I have felt hopeless or discouraged\",\n    \"I have felt hungry\",\n    \"It is hard to pay attention to things\",\n    \"I have felt happy and content\",\n    \"My sleep has been troubled\",\n    \"It has been difficult to think clearly\",\n    \"I think about food a lot\"\n  ]\n  return questions;\n}\n\nconst GenderOptions = [\n  { key: 'F', text: 'Female', value: 'F' },\n  { key: 'M', text: 'Male', value: 'M' },\n  { key: 'Other', text: 'Other', value: 'O' },\n  { key: 'NA', text: 'Prefer Not To Answer', value: 'NA' }\n]\n\n\n\nclass SetupPage extends React.Component {\n  state = {\n    step: 1,\n    QuestionList: getInitialQuestions(),\n    AnswerList: [],\n    totalSteps: 1 + getInitialQuestions().length/5 //5 questions per page\n  }\n  nextStep = () => {\n        const { step } = this.state\n        this.setState({\n            step : step + 1\n        })\n    }\n  prevStep = () => {\n      const { step } = this.state\n      this.setState({\n          step : step - 1\n      })\n  }\n  handleChange = input => event => {\n    this.setState({ [input] : event.target.value })\n    }\n  render() {\n    const {step} = this.state;\n    const {QuestionList} = this.state;\n    return(\n      <div>\n        <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n          <Grid.Column style={{ maxWidth: 1000 }}>\n            <Container text style={{ marginTop: '-1' }}>\n              <Header as='h1' color='teal'>Welcome to Moodzaic!</Header>\n              <p>Fill out this form so we can create your account.</p>\n              <Form>\n                <div class=\"two fields\">\n                  <Form.Field>\n                    <label>First Name</label>\n                    <input />\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Last Name</label>\n                    <input />\n                  </Form.Field>\n                </div>\n                <div class=\"three fields\">\n                <Form.Field>\n                  <label>Age</label>\n                  <input placeholder='Replace with birthdate?'/>\n                </Form.Field>\n                <Form.Field>\n                  <label>Gender</label>\n                  <Dropdown placeholder='Select' fluid selection options={GenderOptions}/>\n                </Form.Field>\n                <Form.Field>\n                  <label>Email</label>\n                  <input />\n                </Form.Field>\n                </div>\n              </Form>\n              {QuestionList.map((Question, index) => {\n                return (<Form>\n                  <Form.Field>\n                    <label>{Question}</label>\n                    <Rating icon=\"heart\" defaultRating={0} maxRating={5} size=\"huge\" />\n                  </Form.Field>\n                </Form>)})}\n                <Link to=\"/MyMood\">\n                  <Button color='teal' fluid size='large'>\n                    Create Account\n                  </Button>\n                </Link>\n            </Container>\n          </Grid.Column>\n        </Grid>\n      </div>\n    )\n  }\n}\n\n/*\n<Form>\n  <Form.Field>\n    <label>Name</label>\n    <input />\n  </Form.Field>\n</Form>\n<Form>\n  <Form.Field>\n    <label>Gender</label>\n    <Dropdown placeholder='Select' fluid selection options={GenderOptions} />\n  </Form.Field>\n</Form>\n<Form>\n  <Form.Field>\n    <label>Choose communities that might interest you</label>\n  </Form.Field>\n</Form>\n<Link to=\"/MyMood\">\n  <Button color='teal' fluid size='large'>\n    Continue\n  </Button>\n</Link>\n*/\n\nexport default SetupPage;\n","import React, { Component } from 'react';\n// import '../App.css';\nimport LoginForm from './LogIn.js'\nimport ProfilePage from './ProfPage.js'\nimport MoodPage from './MoodInput.js'\nimport CommunityPage from './CommunityPage.js'\nimport Community from './Community.js'\nimport SignUpForm from './SignUp.js'\nimport SetupPage from './AccountSetup.js'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nclass App extends Component {\n\n  state = {\n        LoggedIn: false,\n        Name: 'TestName',\n        Username: 'TestUsername',\n        MyCommunityList: [],\n        MyObservationList: [],\n        LastObservationTime: '',\n        Age: 0,\n        Gender: 'F',\n        ProgressScore: 0\n  }\n\n  toggleLogIn = () => {\n      this.setState(prevState => ({\n        LoggedIn: !prevState.LoggedIn\n      }))\n  }\n\n  render() {\n    return (\n      <div>\n        <Router>\n          <Switch>\n            <Route path=\"/signup\">\n              <SignUpForm />\n            </Route>\n            <Route path=\"/MyMood\">\n              <MoodPage />\n            </Route>\n            <Route path=\"/Welcome\">\n              <SetupPage />\n            </Route>\n            <Route path=\"/Profile\">\n              <ProfilePage Username={this.state.Username} Name={this.state.Name}\n                Age={this.state.Age} Gender={this.state.Gender}\n                ProgressScore={this.state.ProgressScore}/>\n            </Route>\n            <Route path=\"/Communities\">\n              <CommunityPage username={this.state.Username}/>\n            </Route>\n            <Route path=\"/\">\n              {this.state.LoggedIn ?\n                <ProfilePage Username={this.state.Username} Name={this.state.Name}\n                  Age={this.state.Age} Gender={this.state.Gender}\n                  ProgressScore={this.state.ProgressScore}/> :\n                <LoginForm callback = {this.toggleLogIn} />}\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport MoodPage from './components/MoodInput';\nimport ProfilePage from './components/ProfPage';\nimport CommunityPage from './components/Community';\n\nimport { Router, Route, Link, browserHistory, IndexRoute } from 'react-router'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render((\n//    <Router history = {browserHistory}>\n//       <Route path = \"/\" component = {App}>\n//          <IndexRoute component = {App} />\n//          <Route path = \"home\" component = {App} />\n//          <Route path = \"mood input\" component = {MoodPage} />\n//          <Route path = \"profile\" component = {ProfilePage} />\n//          <Route path = \"communities\" component = {CommunityPage} />\n//       </Route>\n//    </Router>\n// ), document.getElementById('app'))\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"media/logo.10300733.png\";"],"sourceRoot":""}